import pandas as pd
import numpy as np
import sys
np.set_printoptions(threshold=sys.maxsize)

# read in both excel files into pandas dataframes
md_files = pd.read_excel('G:\\datasets\\mining_district\\mining_district_files_12202019.xlsx')
commodities = pd.read_excel('G:\\datasets\\mining_district\\nv_commodities.xlsx')

# take a look at unique values in the mining district files commodities list
comm_list = md_files.commodity.str.cat(sep="; ")
comm_list_arr = comm_list.split("; ")
comm_list_arr = np.unique(comm_list_arr, axis=0)

# identify values that are in the mining district file spreadsheet but NOT in the commodities master list

#first, change lists to sets and make them all lower case for comparison
lower_md_comm = {item.lower() for item in comm_list_arr}
lower_gen_comm = {item.lower() for item in commodities.name}

#find out what values are in the mining district files that do overlap with the commodities master list, and which ones don't
not_in = lower_md_comm.difference(lower_gen_comm)
intersection = lower_md_comm.intersection(lower_gen_comm)

#These codes run

df1=pd.DataFrame(md_files)

df1=df1.replace(to_replace ='BAIRITE', value ="BARYTE", regex= True)

df2=pd.DataFrame(lower_gen_comm)

df2=df2.replace(to_replace = 'molybdenium', value= 'molybdenum', regex= True)
df2=df2.replace(to_replace= 'vanandinite', value='vanadinite', regex= True)
df2=df2.replace(to_replace= 'soduim', value='sodium', regex= True)
df2=df2.replace(to_replace='lead tungston', value='lead tungsten', regex= True)
df2=df2.replace(to_replace='leaseable', value='leasable', regex= True)
df2=df2.replace(to_replace='wallastonite', value='wollastonite', regex= True)
df2=df2.replace(to_replace='neodynium', value='neodymium', regex= True)
df2=df2.replace(to_replace='copper tungston', value='copper tungsten', regex= True)
df2=df2.replace(to_replace='kuroko base metal deposit', value='kuroko deposit', regex= True)
df2=df2.replace(to_replace='uraniforous', value='uraniferous', regex= True)
df2=df2.replace(to_replace='sodium sufate', value='sodium sulfate', regex= True)


df3=pd.DataFrame(lower_md_comm)
df3=df3.replace(to_replace='platimun', value='platinum', regex= True)
df3=df3.replace(to_replace='tunsten', value='tungsten', regex= True)
df3=df3.replace(to_replace='silca sand',value='silica sand', regex= True)
df3=df3.replace(to_replace='murcury', value='mercury', regex= True)
df3=df3.replace(to_replace='glod', value='gold', regex= True)
df3=df3.replace(to_replace='hornsilver', value='horn silver', regex= True)
df3=df3.replace(to_replace='magnesiuim', value= 'magnesium', regex= True)
df3=df3.replace(to_replace='varicite', value='variscite', regex= True)
df3=df3.replace(to_replace='fluorspar;barite', value='fluorspar; barite', regex= True)
df3=df3.replace(to_replace='fledspar', value='feldspar', regex= True)
df3=df3.replace(to_replace='bitumens', value='bituminous minerals', regex= True)
df3=df3.replace(to_replace='fluroite', value= 'fluorite', regex= True)
df3=df3.replace(to_replace='lead-sillver', value= 'lead-silver', regex= True)
df3=df3.replace(to_replace='hgold', value='gold', regex= True)
df3=df3.replace(to_replace='cpper', value='copper', regex= True)
df3=df3.replace(to_replace='artimony', value='antimony', regex= True)
df3=df3.replace(to_replace='coppper', value='copper', regex= True)
df3=df3.replace(to_replace='molybdeum', value='molybdneum', regex= True)
df3=df3.replace(to_replace='flourite', value='fluorite', regex= True)
df3=df3.replace(to_replace='sheelite', value='scheelite', regex= True)
df3=df3.replace(to_replace='chlorargyite', value='chlorargyrite', regex= True)
df3=df3.replace(to_replace='malacite', value='malachite', regex= True)
df3=df3.replace(to_replace='mangansese', value='manganese', regex= True)
df3=df3.replace(to_replace='vanandinite', value='vanadinite', regex= True)
df3=df3.replace(to_replace='soduim nitrate', value='sodium nitrate', regex= True)
df3=df3.replace(to_replace='flurotie', value='fluorite', regex= True)
df3=df3.replace(to_replace='tungston', value='tunsten', regex= True)
df3=df3.replace(to_replace='wolastonite', value='wollastonite', regex= True)
df3=df3.replace(to_replace='mangnaese', value='manganese', regex= True)
df3=df3.replace(to_replace='molybdemum', value='molybdenum', regex= True)
df3=df3.replace(to_replace='silver;copper', value='silver; copper', regex= True)
df3=df3.replace(to_replace='wulphur', value='sulphur', regex= True)
df3=df3.replace(to_replace='cerrusite', value='cerrussite', regex= True)
df3=df3.replace(to_replace='zince', value= 'zinc', regex= True)
df3=df3.replace(to_replace='ainc', value='zinc', regex= True)
df3=df3.replace(to_replace='paladium', value='palladium', regex= True)
df3=df3.replace(to_replace='salines', value= 'saline minerals', regex= True)
df3=df3.replace(to_replace='cpidote', value= 'epidote', regex= True)
df3=df3.replace(to_replace='batite', value='barite', regex= True)
df3=df3.replace(to_replace='ceragyrite', value='cerargyrite', regex= True)
df3=df3.replace(to_replace='liemstone', value='limestone', regex= True)
df3=df3.replace(to_replace='ismium', value='osmium', regex= True)
df3=df3.replace(to_replace='pumacite', value='pumicite', regex= True)
df3=df3.replace(to_replace='cuo', value= 'copper oxide', regex= True)
df3=df3.replace(to_replace='siler', value='silver', regex= True)
df3=df3.replace(to_replace='rungsten', value='tungsten', regex= True)
df3=df3.replace(to_replace='goldl', value='gold', regex= True)
df3=df3.replace(to_replace='phospherous', value='phosphorous', regex= True)
df3=df3.replace(to_replace='marganese', value='manganese', regex= True)
df3=df3.replace(to_replace='wollastorite', value='wollastonite', regex= True)
df3=df3.replace(to_replace='molybdenyum', value='molybdenum', regex= True)
df3=df3.replace(to_replace='goled', value='gold', regex= True)
df3=df3.replace(to_replace= 'andelusite', value= 'andalusite', regex= True)
df3=df3.replace(to_replace='flurine', value='fluorine', regex= True)
df3=df3.replace(to_replace='diatomaceaous', value= 'diatomaceous' , regex= True)
df3=df3.replace(to_replace='leaseable', value='leasable' , regex= True)
df3=df3.replace(to_replace='dolomite;dolomitic;limestone;calcitic dolomite', value='dolomite; dolomitic; limestone; calcitic dolomite', regex= True)
df3=df3.replace(to_replace='molybedeaum', value='molybdenum', regex= True)
df3=df3.replace(to_replace='milybdenum', value= 'molybdenum', regex= True)
df3=df3.replace(to_replace='chlorite;talc;calcite', value='chlorite; talc; calcite', regex= True)
df3=df3.replace(to_replace='coppeer', value= 'copper', regex= True)
df3=df3.replace(to_replace='clay;talc', value='clay; talc', regex= True)
df3=df3.replace(to_replace='brucitite-magnesite', value='brucite-magnesite', regex= True)
df3=df3.replace(to_replace='wolfenite', value= 'wulfenite', regex= True)
df3=df3.replace(to_replace='silver sulfides and preciuos-metals', value='silver sulfides and precious-metals', regex= True)
df3=df3.replace(to_replace='maganese', value='manganese', regex= True)
df3=df3.replace(to_replace='casserite', value='cassiterite', regex= True)
df3=df3.replace(to_replace='florite', value='fluorite', regex= True)
df3=df3.replace(to_replace='antomony', value='antimony', regex= True)
df3=df3.replace(to_replace='mercry', value='mercury', regex= True)
df3=df3.replace(to_replace='potussium chloride', value='potassium chloride', regex= True)
df3=df3.replace(to_replace='phos-o', value='phosphorus', regex= True)
df3=df3.replace(to_replace='tugnsten', value='tungsten', regex= True)
df3=df3.replace(to_replace='gysum', value='gypsum', regex= True)
df3=df3.replace(to_replace='stivnite', value='stibnite', regex= True)
df3=df3.replace(to_replace='tugsten', value='tungsten', regex= True)
df3=df3.replace(to_replace='vanadenite', value='vanadinite', regex= True)
df3=df3.replace(to_replace='arsenci', value='arsenic', regex= True)
df3=df3.replace(to_replace='bairte', value='barite', regex= True)
df3=df3.replace(to_replace='calcite;dolomite;sepiolite;silicate;mg clay', value='calcite; dolomite; sepiolite; silicate; magnesium clay', regex= True)
df3=df3.replace(to_replace='sercite', value='sericite', regex= True)
df3=df3.replace(to_replace='molyhdenum',value='molybdenum', regex= True)
df3=df3.replace(to_replace='golq', value='gold', regex= True)
df3=df3.replace(to_replace='coopper', value='copper', regex= True)
df3=df3.replace(to_replace='copper;bairite', value='copper; barite', regex= True)
df3=df3.replace(to_replace='posellite', value='powellite', regex= True)
df3=df3.replace(to_replace='tellinium', value='tellurium', regex= True)
df3=df3.replace(to_replace='silver-sinc-lead', value='silver-zinc-lead', regex= True)
df3=df3.replace(to_replace='tungiten', value='tungsten', regex= True)
df3=df3.replace(to_replace='siilver', value='silver', regex= True)
df3=df3.replace(to_replace='laead', value='lead', regex= True)
df3=df3.replace(to_replace='montmorillinitic clay', value='montmorillonite clay', regex= True)
df3=df3.replace(to_replace='wallastonite', value='wollastonite', regex= True)
df3=df3.replace(to_replace='modybdenum', value='molybdenum', regex= True)
df3=df3.replace(to_replace='silve', value='silver', regex= True)
df3=df3.replace(to_replace='sulphur deposites', value='sulphur', regex= True)
df3=df3.replace(to_replace='tunsgten', value='tungsten', regex= True)
df3=df3.replace(to_replace='talc;chlorite', value='talc; chlorite', regex= True)
df3=df3.replace(to_replace='mersury', value='mercury', regex= True)
df3=df3.replace(to_replace='sodium sufate', value='sodium sulfate', regex= True)
df3=df3.replace(to_replace='sulphides', value='sulfides', regex= True)
df3=df3.replace(to_replace='sulvides and precious metals', value='sulfides and precious metals', regex= True)
df3=df3.replace(to_replace='uranium, copper, nickle, cobalt', value='uranium, copper, nickel, cobalt', regex= True)
df3=df3.replace(to_replace='vanadiuml zinc', value='vanadium zinc', regex= True)
df3=df3.replace(to_replace='diamtomite', value='diatomite', regex= True)
df3=df3.replace(to_replace='fluroite;gold', value='fluroite; gold', regex= True)
df3=df3.replace(to_replace='vanudium', value='vanadium', regex= True)
df3=df3.replace(to_replace='siver', value='silver', regex= True)
df3=df3.replace(to_replace='betonite', value='bentonite', regex= True)
df3=df3.replace(to_replace='arsencic', value='arsenic', regex= True)
df3=df3.replace(to_replace='chrysacolla', value='chrysocolla', regex= True)
df3=df3.replace(to_replace='colbalt', value='cobalt', regex= True)
df3=df3.replace(to_replace='volcanid ash', value='volcanic ash', regex= True)

df4=pd.DataFrame(intersection)
df4=df4.replace(to_replace='soduim nitrate', value='sodium nitrate', regex= True)
df4=df4.replace(to_replace='sodium sufate', value='sodium sulfate', regex= True)
df4=df4.replace(to_replace='leaseable minerals', value='leasable minerals', regex= True)

df5=pd.DataFrame(comm_list_arr)
df5=df5.replace(to_replace='AND MINOR AMMOUNTS OF MERCURY', value='AND MINOR AMOUNTS OF MERCURY', regex= True)
df5=df5.replace(to_replace='ANDELUSITE',value='ANDALUSITE', regex= True)
df5=df5.replace(to_replace='ANTIMONY?', value='ANTIMONY', regex= True)
df5=df5.replace(to_replace='ANTOMONY', value='ANTINOMY', regex= True)
df5=df5.replace(to_replace= 'ARSENCI', value= 'ARSENIC', regex= True)
df5=df5.replace(to_replace= 'ARSENCIC',value= 'ARSENIC', regex= True)
df5=df5.replace(to_replace= 'ARSNIC',value= 'ARSENIC', regex= True)
df5=df5.replace(to_replace='ARTIMONY', value='ANTINOMY', regex= True)
df5=df5.replace(to_replace='AU', value= 'GOLD', regex= True)
df5=df5.replace(to_replace='AU, AG', value= 'GOLD, SILVER', regex= True)
df5=df5.replace(to_replace='BAIRTE', value= 'BARITE', regex= True)
df5=df5.replace(to_replace= 'BATITE', value= 'BARITE', regex= True)
df5=df5.replace(to_replace='BERRYLIUM', value= 'BERYLLIUM', regex= True)
df5=df5.replace(to_replace='BETONITE', value='BENTONITE', regex= True)
df5=df5.replace(to_replace='CASSERITE', value='CASSITRITE', regex= True)
df5=df5.replace(to_replace='CERRUSITE', value='CERUSSITE', regex= True)
df5=df5.replace(to_replace='CHLORARGYITE', value='CHLORARGRITE', regex= True)
df5=df5.replace(to_replace='CHRYSACOLLA', value='CHRYSOCOLLA', regex= True)
df5=df5.replace(to_replace='COLBALT', value= 'COBALT', regex= True)
df5=df5.replace(to_replace='COOPPER', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='COPER', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='COPPEER', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='COPPER?', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='COPPPER', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='CPPER', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='CPIDOTE', value='EPIDOTE', regex= True)
df5=df5.replace(to_replace='DIAMTOMITE', value='DIATOMITE', regex= True)
df5=df5.replace(to_replace='DIATOMACEAOUS EARTH', value='DIATOMACEOUS EARTH', regex= True)
df5=df5.replace(to_replace='FLEDSPAR', value='FELDSPAR', regex= True)
df5=df5.replace(to_replace='FLORITE', value='FLUORITE', regex= True)
df5=df5.replace(to_replace='FLOURITE', value='FLUORITE', regex= True)
df5=df5.replace(to_replace='FLURINE', value='FLUORINE', regex= True)
df5=df5.replace(to_replace='FLUROITE', value='FLUORITE', regex= True)
df5=df5.replace(to_replace='FLUROITE;GOLD', value= 'FLUORITE, GOLD', regex= True)
df5=df5.replace(to_replace='FLUROTIE', value='FLUORITE', regex= True)
df5=df5.replace(to_replace='GLOD',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='GOD',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='PHOSPHEROUS', value= 'PHOSPHORUS', regex= True)
df5=df5.replace(to_replace='GLOLD',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='GOLED',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='GOLQ',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='GYSUM', value='GYPSUM', regex= True)
df5=df5.replace(to_replace='HGOLD', value='HORN GOLD', regex= True)
df5=df5.replace(to_replace='IRIGIUM', value='IRIDIUM', regex= True)
df5=df5.replace(to_replace='ISMIUM', value='OSMIUM', regex= True)
df5=df5.replace(to_replace='LAEAD', value='LEAD', regex= True)
df5=df5.replace(to_replace='LEAD-SILLVER', value='LEAD, SILVER', regex= True)
df5=df5.replace(to_replace='LEASEABLE MINERALS', value= 'LEASABLE MINERALS', regex= True)
df5=df5.replace(to_replace='LIEMSTONE',value='LIMESTONE', regex= True)
df5=df5.replace(to_replace='MAGANESE', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MAGNESIA ALUM', value='MAGNESIA ALUMINA', regex= True)
df5=df5.replace(to_replace='MAGNESIUIM', value='MAGNESIUM', regex= True)
df5=df5.replace(to_replace='MALACITE', value='MALACHITE', regex= True)
df5=df5.replace(to_replace='MANGANE4SE', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MANGANSESE', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MANGNAESE', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MARGANESE', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MERSURY', value= 'MERCURY', regex= True)
df5=df5.replace(to_replace='MILYBDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MODYBDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLBDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLBDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYBDEMUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYBDEUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYBEDEAUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYBEDUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYBENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYHDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MOLYNDENUM',value='MOLYBDENUM', regex= True)
df5=df5.replace(to_replace='MONTMORILLINITIC CLAY', value= 'MONTMORILLIC CLAY', regex= True)
df5=df5.replace(to_replace='MORILLONITE', value='MONTMORLLINITE', regex= True)
df5=df5.replace(to_replace='MURCURY', value='MERCURY', regex= True)
df5=df5.replace(to_replace='PALADIUM', value= 'PALLADIUM', regex= True)
df5=df5.replace(to_replace='PLATIMUN', value= 'PLATINUM', regex= True)
df5=df5.replace(to_replace='POTUSSIUM CHLORIDE', value= 'POTASSIUM CHLORIDE', regex= True)
df5=df5.replace(to_replace='RUNGSTEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='SHEELITE', value='SCHEELITE', regex= True)
df5=df5.replace(to_replace='SIILVER', value='SILVER', regex= True)
df5=df5.replace(to_replace='SILCA SAND', value='SILICA SAND', regex= True)
df5=df5.replace(to_replace='SILVE', value='SILVER', regex= True)
df5=df5.replace(to_replace='SILVER HALOID SALTS', value='SILVER HALIDE SALTS', regex= True)
df5=df5.replace(to_replace='PRECIUOS-METALS', value='PRECIOUS METALS', regex= True)
df5=df5.replace(to_replace='SILVER-SINC-LEAD', value='SILVER, ZINC, LEAD', regex= True)
df5=df5.replace(to_replace='SIVER', value='SILVER', regex= True)
df5=df5.replace(to_replace='SODIUM SUFATE', value='SODIUM SULFATE', regex= True)
df5=df5.replace(to_replace='SODUIM NITRATE', value='SODIUM NITRATE', regex= True)
df5=df5.replace(to_replace='STIVNITE', value='STIBNITE', regex= True)
df5=df5.replace(to_replace='SULPHUR DEPOSITES', value='SULPHUR DEPOSITS', regex= True) 
df5=df5.replace(to_replace='SULVIDES AND PRECIOUS METALS', value='SULFIDES, PRECIOUS METALS', regex= True)
df5=df5.replace(to_replace='TELLINIUM', value= 'TELLURIUM', regex= True)
df5=df5.replace(to_replace='TRAVERTINE (BUILDING STONE?)', value='TRAVERTINE', regex= True)
df5=df5.replace(to_replace='TUGNSTEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TUGSTEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TUNGITEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TUNGSTON', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TUNSGTEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TUNSTEN', value='TUNGSTEN', regex= True)
df5=df5.replace(to_replace='TURQUOIS', value='TURQUOISE', regex= True)
df5=df5.replace(to_replace='VANADIUML ZINC', value= 'VANADIUM ZINC', regex= True)
df5=df5.replace(to_replace='VANANDINITE', value= 'VANADINITE', regex= True)
df5=df5.replace(to_replace='VANUDIUM', value= 'VANADIUM', regex= True)
df5=df5.replace(to_replace='VARICITE', value= 'VARISCITE', regex= True)
df5=df5.replace(to_replace='VOLCANID ASH', value= 'VOLCANIC ASH', regex= True)
df5=df5.replace(to_replace='WALLASTONITE', value='WOLLASTONITE', regex= True)
df5=df5.replace(to_replace='WOLASTONITE', value='WOLLASTONITE', regex= True)
df5=df5.replace(to_replace='WOLFENITE', value='WULFENITE', regex= True)
df5=df5.replace(to_replace='WOLLASTORITE', value='WOLLASTONITE', regex= True)
df5=df5.replace(to_replace='WULPHUR', value= 'SULPHUR', regex= True)
df5=df5.replace(to_replace='ZINC?', value='ZINC', regex= True)
df5=df5.replace(to_replace='ZINCE', value='ZINC', regex= True)
df5=df5.replace(to_replace='ZINE', value='ZINC', regex= True)


#These codes dont run 
#Python keeps reading the (?) as an extension
df5=df5.replace(to_replace='BAIRTE(?)', value= 'BARITE')
df5=df5.replace(to_replace='ZINC (?)', value='ZINC', regex= True)
df5=df5.replace(to_replace='DISSEMINATED GOLD (?)', value='DISSEMINATED GOLD', regex= True)
df5=df5.replace(to_replace='BARIUM (?)', value='BARIUM', regex= True)
df5=df5.replace(to_replace='ANTIMONY (?)', value='ANTIMONY', regex= True)
df5=df5.replace(to_replace='BORATES (?)', value='BORATES', regex= True)
df5=df5.replace(to_replace='GEM QUALITY JASPER (?)', value= 'GEM QUALITY JASPER', regex= True)
df5=df5.replace(to_replace='JASPEROID (?)', value= 'JASPEROID', regex= True)
df5=df5.replace(to_replace='FLUORITE (?)', value='FLUORITE', regex= True)
df5=df5.replace(to_replace='FLUORINE (?)', value='FLUORINE', regex= True)
df5=df5.replace(to_replace='GOLD (?)',value= 'GOLD', regex= True)
df5=df5.replace(to_replace='COPPER (?)', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='COPPER Oxides (?)', value= 'COPPER', regex= True)
df5=df5.replace(to_replace='CHROMIUM (?)', value= 'CHROMIUM', regex= True)
df5=df5.replace(to_replace='MANGANESE (?)', value='MANGANESE', regex= True)
df5=df5.replace(to_replace='MERCURY (?)', value= 'MERCURY', regex= True)
df5=df5.replace(to_replace='SILVER GOLD (?)' , value='SILVER, GOLD', regex=True)
df5=df5.replace(to_replace='PRECIOUS METALS (?)', value= 'PRECIOUS METALS', regex= True)
df5=df5.replace(to_replace='PRECIOUS-METALS (?)', value= 'PRECIOUS METALS', regex= True)
df5=df5.replace(to_replace='PRECIOUS-METAL (?)', value= 'PRECIOUS METALS', regex= True)
df5=df5.replace(to_replace='QUARTZ (?)', value= 'QUARTZ', regex= True)
df5=df5.replace(to_replace='SULFIDES (?)', value='SULFIDES', regex=True)
df5=df5.replace(to_replace='TITANIUM(?)', value='TITANIUM', regex= True)
df5=df5.replace(to_replace='URANIUM (?)', value='URANIUM', regex= True)
df5=df5.replace(to_replace= 'VANADIUM (?)', value= 'VANADIUM',regex=True)
df5=df5.replace(to_replace='ZEOLITE (?)', value='ZEOLITE', regex= True)
df5=df5.replace(to_replace='ZEOLITES (?)', value='ZEOLITES', regex= True)
df5=df5.replace(to_replace='ZINC (?)', value='ZINC', regex= True)
df5=df5.replace(to_replace='ZINE (?)', value='ZINC', regex= True)



#Python thints that the 'Silver)' is an incomplete parethesies
df5=df5.replace(to_replace='SILVER)', value='SIL


md_files = pd.read_excel('mining_district_files_12202019.xlsx')
counties = pd.read_excel('district_info_01212020.xlsx')
counties= counties.apply(lambda x: x.str.strip() if x.dtype == "object" else x)

county_list = md_files.county.str.cat(sep=", ")
county_list_arr = county_list.split(", ")
county_list_arr = np.unique(county_list_arr, axis=0)

m_county_list1 = counties.county1.str.cat(sep=", ")
m_county_list_arr1 = m_county_list1.split(", ")
m_county_list_arr1 = np.unique(m_county_list_arr1, axis=0)

m_county_list2 = counties.county2.str.cat(sep=", ")
m_county_list_arr2 = m_county_list2.split(", ")
m_county_list_arr2 = np.unique(m_county_list_arr2, axis=0)

lower_md_county = {item.lower() for item in county_list_arr}
lower_gen_county = {item.lower() for item in m_county_list_arr1}

not_in = lower_md_county.difference(lower_gen_county)
intersection = lower_md_county.intersection(lower_gen_county)

df=pd.DataFrame(md_files)

df.replace(to_replace='elko co.', value='Elko')
df.replace(to_replace='mineral co.', value='Mineral')
df.replace(to_replace='eklo', value='Elko')
df.replace(to_replace='douglass', value='Douglas')
df.replace(to_replace='clark ?', value='Clark')
df.replace(to_replace='humboldt (?)', value='Humboldt')
#make not of the question marks for humbolt and clark
df.replace(to_replace='FMG', value=' ')
df.replace(to_replace='F', value='Humboldt')
df.replace(to_replace='lyon and douglas', value='lyon, douglas')
df.replace(to_replace='elko; box elder and tooele utah', value='elko, box elder utah, tooele utah')
df.replace(to_replace='white pine; elko', value='white pine, elko')
df.replace(to_replace='douglas; lyon', value='douglas, lyon')
df.replace(to_replace='lyon; storey', value='lyon, storey')
df.replace(to_replace='washoe or pershing', value='washoe, pershing')
df.replace(to_replace='nye; white pine', value='nye, white pine')
df.replace(to_replace='storey; washoe', value='storey, washoe')
df.replace(to_replace='eureka; lander', value='eureka, lander')
df.replace(to_replace='nye/esmeralda', value='nye, esmeralda')
df.replace(to_replace='pershing/humboldt', value='pershing, humboldt')
df.replace(to_replace='alpine', value='alpine(ca)')
df.replace(to_replace='esmeralda; mineral', value='esmeralda, mineral')
df.replace(to_replace='churchhill', value='churchill')
df.replace(to_replace='humbodlt', value='humboldt')
df.replace(to_replace='churchhill/mineral', value='churchill, mineral')
df.replace(to_replace='lyon; mineral', value='lyon, mineral')
df.replace(to_replace='esmeralds', value='esmeralda')
df.replace(to_replace='churchill,', value='churchill')
df.replace(to_replace='elko,nv and box elder', value='elko, box elder utah')
df.replace(to_replace='humboldt/lander', value='humboldt, lander')
df.replace(to_replace='eureka and lander', value='eureka, lander')
df.replace(to_replace='lander; nye', value='lander, nye')
df.replace(to_replace='washoe; storey', value='washoe, storey')
df.replace(to_replace='pershing; humboldt', value='pershing, humboldt')
df.replace(to_replace='esmerdalda', value='esmeralda')
df.replace(to_replace='nye and esmeralda', value='nye, esmeralda')
df.replace(to_replace='emeralda', value='esmeralda')
df.replace(to_replace='churchill/mineral', value='churchill, mineral')
df.replace(to_replace='eureka; elko', value='eureka, elko')
df.replace(to_replace='nye; lander', value='nye, lander')
df.replace(to_replace='churchill; lander', value='churchill, lander')
df.replace(to_replace='lincoln; nye', value='lincoln, nye')
df.replace(to_replace='humboldt; pershing', value='humboldt, pershing')
df.replace(to_replace='lyon/mineral', value='lyon, mineral')
df.replace(to_replace='carson', value='carson city')
df.replace(to_replace='lander/ churchill', value='lander, churchill')
df.replace(to_replace='reno1', value=' ')
#reno1 was paired with churchill county, however, mining description said specifically in churchill
